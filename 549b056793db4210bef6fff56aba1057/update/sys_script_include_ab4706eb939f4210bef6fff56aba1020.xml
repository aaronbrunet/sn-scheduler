<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_on_call_sc_0.OnCallUtils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>OnCallUtils</name>
        <sandbox_callable>true</sandbox_callable>
        <script><![CDATA[var OnCallUtils = Class.create();
OnCallUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
    initialize : function(){
		this.constants = this.getConstants();
	},
	getConstants : function(){
		const constants = {
			COUNT: 12,
			TABLE_ROTATIONS: 'x_snc_on_call_sc_0_on_call_rotation',
			TABLE_SHIFTS: 'x_snc_on_call_sc_0_on_call_shift',
			TABLE_TEAMS: 'x_snc_on_call_sc_0_assignment_group',
			TABLE_TEAM_MEMBERS: 'x_snc_on_call_sc_0_user'
		};
		
		return constants;
	},
	buildRotations : function(start,count){
		if(!count || count == ''){
			count = this.constants.COUNT;
		}
		if(!start || start == ''){
			start = new GlideDateTime();
		}
		try {
			for(var i=0; i<count; i++){
				var rgr = new GlideRecord(this.constants.TABLE_ROTATIONS);
				var s_gdt = new GlideDateTime(start);
				s_gdt.addDaysLocalTime((i * 7));
				var _start = new GlideDate();
				_start.setValue(s_gdt.getLocalDate());

				var _end = new GlideDate();
				_end.setValue(e_gdt.getLocalDate());
				var e_gdt = new GlideDateTime(s_gdt);
				e_gdt.addDaysLocalTime(7);
				
				rgr.initialize();
				rgr.setValue('from',_start);
				rgr.setValue('to',_end);
				rgr.insert();
				gs.info(JSON.stringify(rgr));
			}
		}
		catch(err){
			gs.info('Insertion failed due to error: '+err);
		}

	},
	buildTeamRoster : function(team,role){
		if(!team) {
			return gs.info('No team specified');
		}
		if(!role){
			role = 'engineer';
		}
		/*
		var _team = new GlideRecord(this.constants.TABLE_TEAM);
		_team.get(team);
		if(!_team){
			return gs.info('No team specified');
		}
		*/
		var _tm_arr = [];
		var order = 1;
		var _tm = new GlideRecord(this.constants.TABLE_TEAM_MEMBERS);
		_tm.addQuery('active',true);
		_tm.addQuery('assignment_group',team);
		_tm.addQuery('role',role)
		_tm.query();
		while(_tm.next()){
			_tm_arr.push({
				id: _tm.getUniqueValue(),
				order: order
			});
			order++;
		}
		return _tm_arr;
	},
	buildShifts : function(start,team,role){
		if(!start){
			start = new GlideDateTime();
		}
		if(!role){
			role = 'engineer';
		}
		try {
			var roster = this.buildTeamRoster(team,role);
			var ri = 0;
			var rotations = new GlideRecord(this.constants.TABLE_ROTATIONS);
			rotations.addEncodedQuery(`from>=javascript:gs.dateGenerate('${start}','end')`);
			rotations.query();
			while(rotations.next()){
				if(!this.checkDuplicateShift(rotations.getUniqueValue(),team,role)){
					var user = roster[ri];
					var shift = new GlideRecord(this.constants.TABLE_SHIFTS);
					shift.initialize();
					shift.setValue('rotation',rotations.getUniqueValue());
					shift.setValue('team',team);			
					shift.setValue('team_member',user.id);
					shift.setValue('from',rotations.getValue('from'));
					shift.setValue('to',rotations.getValue('to'));
					shift.insert();
					if(ri<roster.length-1){
						ri++;
					} else {
						ri = 0;
					}
				} else {
					gs.info(`A duplicate shift already exists for ${rotations.getDisplayValue('rotation')} for ${team}`);
				}
			}
		} catch(err) {
			gs.info('Insertion failed due to error: '+err);

		}
		
	},
	checkDuplicateShift : function(rotation,team,role){
		var shift = new GlideRecord(this.constants.TABLE_SHIFTS);
		shift.addQuery('rotation',rotation);
		shift.addQuery('team',team);
		shift.addQuery('type',role);
		shift.query();
		if(shift.hasNext()){
			return true;
		}
		return false;
	},
	getRotation : function(date){
		const _date = date ?? new GlideDate();
		var rotation = new GlideRecord(this.constants.TABLE_ROTATIONS);
		rotation.addEncodedQuery(`from<=javascript:gs.dateGenerate('${_date}','start')^to>=javascript:gs.dateGenerate('${_date}','end')`);
		rotation.query();
		if(rotation.next()){
			return rotation.getUniqueValue();
		}
	},
	getManagersByRotation : function(rotation,region){
		var managers = [];
		var shifts = new GlideRecord(this.constants.TABLE_SHIFTS);
		shifts.addEncodedQuery(`rotation=${rotation}^type=manager^state!=cancelled`);
		if(region && region != ''){
			shifts.addQuery('team_member.region',region);
		}
		shifts.query();
		while(shifts.next()){
			let manager = {
				id:shifts.team_member.getValue('sys_id'),
				name:shifts.getDisplayValue('team_member'),
				email:shifts.getDisplayValue('team_member.user.email'),
				phone:shifts.getDisplayValue('team_member.user.phone'),
				shift_id:shifts.getUniqueValue(),
				region:shifts.getDisplayValue('team_member.region')
			};
			managers.push(manager);
		}
		return managers;
	},
	getManagersByDate : function(date){
		var _date = date ?? new GlideDate();
		var rotation = this.getRotation(_date);
		return this.getManagersByRotation(rotation);
		
	},
	getTeamShiftByDate : function(team,date){
		var _date = date ?? new GlideDate();
		var rotation = this.getRotation(_date);
		return this.getTeamShiftByRotation(team,rotation);
	},
	getTeamShiftByRotation : function(team,rotation){
		var shift = new GlideRecord(this.constants.TABLE_SHIFTS);
		shift.addEncodedQuery(`rotation=${rotation}^team=${team}^state!=cancelled^type=engineer`);
		shift.query();
		if(shift.next()){
			return {
				id:shift.team_member.getValue('sys_id'),
				team:shift.getDisplayValue('team'),
				name:shift.getDisplayValue('team_member'),
				email:shift.getDisplayValue('team_member.user.email'),
				phone:shift.getDisplayValue('team_member.user.phone'),
				shift_id:shift.getUniqueValue(),
				region:shift.getDisplayValue('team_member.region')
			};
		}
	},
	getAllShiftsForRotation : function(rotation){
		var engs = [];
		var shifts = new GlideRecord(this.constants.TABLE_SHIFTS);
		shifts.addEncodedQuery(`rotation=${rotation}^state!=cancelled^type=engineer`);
		shifts.query();
		while(shifts.next()){
			let eng = {
				id:shifts.team_member.getValue('sys_id'),
				team:shifts.getDisplayValue('team'),
				team_id:shifts.getValue('team'),
				name:shifts.getDisplayValue('team_member'),
				email:shifts.getDisplayValue('team_member.user.email'),
				phone:shifts.getDisplayValue('team_member.user.phone'),
				shift_id:shifts.getUniqueValue(),
				region:shifts.getDisplayValue('team_member.region')
			};
			engs.push(eng);
		}
		return engs;
	},
	getAllTeams : function(){
		var teams = [];
		var tr = new GlideRecord(this.constants.TABLE_TEAMS);
		tr.addQuery('active',true);
		tr.query();
		while(tr.next()){
			teams.push({team:tr.getDisplayValue(),team_id:tr.getUniqueValue()});
		}
		return teams;
	},
	type: 'OnCallUtils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>aaron.brunet</sys_created_by>
        <sys_created_on>2024-07-16 00:43:26</sys_created_on>
        <sys_id>ab4706eb939f4210bef6fff56aba1020</sys_id>
        <sys_mod_count>22</sys_mod_count>
        <sys_name>OnCallUtils</sys_name>
        <sys_package display_value="On-Call Schedule" source="x_snc_on_call_sc_0">549b056793db4210bef6fff56aba1057</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="On-Call Schedule">549b056793db4210bef6fff56aba1057</sys_scope>
        <sys_update_name>sys_script_include_ab4706eb939f4210bef6fff56aba1020</sys_update_name>
        <sys_updated_by>aaron.brunet</sys_updated_by>
        <sys_updated_on>2024-07-17 02:33:36</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>ab4706eb939f4210bef6fff56aba1020</id>
        <sys_created_by>aaron.brunet</sys_created_by>
        <sys_created_on>2024-07-17 01:12:30</sys_created_on>
        <sys_id>15f71b7b93534210bef6fff56aba107b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>aaron.brunet</sys_updated_by>
        <sys_updated_on>2024-07-17 01:12:30</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>

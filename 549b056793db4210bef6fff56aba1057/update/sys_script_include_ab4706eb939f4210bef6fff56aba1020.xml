<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_on_call_sc_0.OnCallUtils</api_name>
        <caller_access/>
        <client_callable>true</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>OnCallUtils</name>
        <sandbox_callable>true</sandbox_callable>
        <script><![CDATA[var OnCallUtils = Class.create();
OnCallUtils.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
    initialize : function(){
		this.constants = this.getConstants();
	},
	getConstants : function(){
		const constants = {
			COUNT: 12,
			TABLE_ROTATIONS: 'x_snc_on_call_sc_0_on_call_rotation',
			TABLE_SHIFTS: 'x_snc_on_call_sc_0_on_call_shift',
			TABLE_TEAMS: 'x_snc_on_call_sc_0_assignment_group',
			TABLE_TEAM_MEMBERS: 'x_snc_on_call_sc_0_user',
			TABLE_HOLIDAYS: 'x_snc_on_call_sc_0_holidays'
		};
		
		return constants;
	},
	buildRotations : function(start,count){
		if(!count || count == ''){
			count = this.constants.COUNT;
		}
		if(!start || start == ''){
			start = new GlideDateTime();
		}
		try {
			for(var i=0; i<count; i++){
				var rgr = new GlideRecord(this.constants.TABLE_ROTATIONS);
				var s_gdt = new GlideDateTime(start);
				s_gdt.addDaysLocalTime((i * 7)+1);
				var _start = new GlideDate();
				_start.setValue(s_gdt.getLocalDate());

				var _end = new GlideDate();
				_end.setValue(e_gdt.getLocalDate());
				var e_gdt = new GlideDateTime(s_gdt);
				e_gdt.addDaysLocalTime(7);
				
				rgr.initialize();
				rgr.setValue('from',_start);
				rgr.setValue('to',_end);
				rgr.insert();
				gs.info(JSON.stringify(rgr));
			}
		}
		catch(err){
			gs.info('Insertion failed due to error: '+err);
		}

	},
	buildTeamRoster : function(team,role){
		console.log([team,role]);
		if(!team) {
			return gs.info('No team specified');
		}
		// if(!role){
		// 	role = 'engineer';
		// }
		/**
		 * If order, sort by order
		 * If no order, sort by Last On-Call
		 * If no Last On-Call, sort last
		 * Allow for manual update??
		 */
		var _tm_arr = [];
		var order = 1;
		var _tm = new GlideRecord(this.constants.TABLE_TEAM_MEMBERS);
		_tm.addQuery('active',true);
		_tm.addQuery('assignment_group',team);
		if(role){ _tm.addQuery('role',role); }
		_tm.query();
		while(_tm.next()){
			_tm_arr.push({
				id: _tm.getUniqueValue(),
				name: _tm.getDisplayValue(),
				user: _tm.getValue('user'),
				region: _tm.getDisplayValue('region'),
				role: _tm.getDisplayValue('role'),
				phone: _tm.getDisplayValue('user.phone'),
				order: order
			});
			order++;
		}
		return _tm_arr;
	},
	buildManagerShifts : function(start,region){
		var managers = [];
		var mr = new GlideRecord(this.constants.TABLE_TEAM_MEMBERS);
		mr.addEncodedQuery(`active=true^region=${region}^role=manager`);
		mr.query();
		while(mr.next()){
			managers.push({
				id: mr.getUniqueValue(),
				order: mr.order
			});
		}
		try {
			this.buildShifts(start,null,'manager',managers);
		} catch(err) {
			gs.info('Failed due to error: '+err);
		}
		
	},
	buildDraftShifts : function(start,team,role,roster){
		var shifts_draft = [];
		if(!start || !start.isValid()){
			start = new GlideDateTime();
		}
		if(!role){
			role = 'engineer';
		}
		if((!roster && team && role) || roster.length == 0){
			roster = this.buildTeamRoster(team,role);
		}

		try {	
			var ri = 0;
			var rotations = new GlideRecord(this.constants.TABLE_ROTATIONS);
			rotations.addEncodedQuery(`from<=javascript:gs.dateGenerate('${start}','start')^to>=javascript:gs.dateGenerate('${start}','end')^NQfrom>=javascript:gs.dateGenerate('${start}','end')`);
			rotations.orderBy('from');
			rotations.query();
			while(rotations.next()){
				var user = roster[ri];
				let shift = {
					rotation:rotations.getDisplayValue('rotation'),
					rotation_id: rotations.getUniqueValue(),
					team:team,
					team_member:user.name,
					team_member_id:user.id,
					type:role,
					from:rotations.getDisplayValue('from'),
					to:rotations.getDisplayValue('to')
				};
				//console.log(['shift',shift]);
				shifts_draft.push(shift);
				if(ri<roster.length-1){
					ri++;
				} else {
					ri = 0;
				}
			}
		} catch(err) {
			gs.info('Insertion failed due to error: '+err);

		}
		//console.log(shifts_draft);
		return shifts_draft;
	},
	buildShiftsFromDraft : function(draft){
		if(!draft){
			gs.info('No draft provided.');
			return;
		}
		try {	
			// var rotations = new GlideRecord(this.constants.TABLE_ROTATIONS);
			// rotations.addEncodedQuery(`from<=javascript:gs.dateGenerate('${start}','start')^to>=javascript:gs.dateGenerate('${start}','end')^NQfrom>=javascript:gs.dateGenerate('${start}','end')`);
			// rotations.orderBy('from');
			// rotations.query();
			for(var i in draft){
				//console.log(draft[i]);
				var ds = draft[i];
				//var user = roster[ri];
				let shift = new GlideRecord(this.constants.TABLE_SHIFTS);
				shift.initialize();
				shift.setValue('rotation',ds.rotation_id);
				shift.setValue('team',ds.team);			
				shift.setValue('team_member',ds.team_member_id);
				shift.setValue('type',ds.type);
				shift.setValue('from',ds.from);
				shift.setValue('to',ds.to);
				shift.insert();
				// if(ri<roster.length-1){
				// 	ri++;
				// } else {
				// 	ri = 0;
				// }
			}
				
		} catch(err) {
			gs.info('Insertion failed due to error: '+err);

		}
	},
	buildShifts : function(start,team,role,roster,flag){
		if(!start || !start.isValid()){
			start = new GlideDateTime();
		}
		if(!role){
			role = 'engineer';
		}
		if((!roster && team && role) || roster.length == 0){
			roster = this.buildTeamRoster(team,role);
		}
		try {	
			var ri = 0;
			var rotations = new GlideRecord(this.constants.TABLE_ROTATIONS);
			//rotations.addEncodedQuery(`from>=javascript:gs.dateGenerate('${start}','end')`);
			rotations.addEncodedQuery(`from<=javascript:gs.dateGenerate('${start}','start')^to>=javascript:gs.dateGenerate('${start}','end')^NQfrom>=javascript:gs.dateGenerate('${start}','end')`);
			rotations.orderBy('from');
			rotations.query();
			while(rotations.next()){
				console.log(['rotations',ri,rotations.getDisplayValue('rotation')])
				if(!this.checkDuplicateShift(rotations.getUniqueValue(),team,role)){
					var user = roster[ri];
						let shift = new GlideRecord(this.constants.TABLE_SHIFTS);
						shift.initialize();
						shift.setValue('rotation',rotations.getUniqueValue());
						shift.setValue('team',team);			
						shift.setValue('team_member',user.id);
						shift.setValue('type',role);
						shift.setValue('from',rotations.getValue('from'));
						shift.setValue('to',rotations.getValue('to'));
						shift.insert();
					if(ri<roster.length-1){
						ri++;
					} else {
						ri = 0;
					}
				} else {
					gs.info(`A duplicate shift already exists for ${rotations.getDisplayValue('rotation')} for ${team}`);
				}
			}
		} catch(err) {
			gs.info('Insertion failed due to error: '+err);

		}
		
	},
	checkDuplicateShift : function(rotation,team,role){
		var shift = new GlideRecord(this.constants.TABLE_SHIFTS);
		shift.addQuery('rotation',rotation);
		shift.addQuery('team',team);
		shift.addQuery('type',role);
		shift.query();
		if(shift.hasNext()){
			return true;
		}
		return false;
	},
	getRotation : function(date){
		const _date = date ?? new GlideDate();
		var rotation = new GlideRecord(this.constants.TABLE_ROTATIONS);
		rotation.addEncodedQuery(`from<=javascript:gs.dateGenerate('${_date}','start')^to>=javascript:gs.dateGenerate('${_date}','end')`);
		rotation.query();
		if(rotation.next()){
			return rotation.getUniqueValue();
		}
	},
	getManagersByRotation : function(rotation,region){
		var managers = [];
		var shifts = new GlideRecord(this.constants.TABLE_SHIFTS);
		shifts.addEncodedQuery(`rotation=${rotation}^type=manager^state!=cancelled`);
		if(region && region != ''){
			shifts.addQuery('team_member.region',region);
		}
		shifts.query();
		while(shifts.next()){
			let manager = {
				id:shifts.team_member.getValue('sys_id'),
				name:shifts.getDisplayValue('team_member'),
				user:shifts.team_member.user.getValue('sys_id'),
				email:shifts.getDisplayValue('team_member.user.email'),
				phone:shifts.getDisplayValue('team_member.user.phone'),
				shift_id:shifts.getUniqueValue(),
				region:shifts.getDisplayValue('team_member.region')
			};
			managers.push(manager);
		}
		return managers;
	},
	getManagersByDate : function(date){
		var _date = date ?? new GlideDate();
		var rotation = this.getRotation(_date);
		return this.getManagersByRotation(rotation);
		
	},
	getTeamShiftByDate : function(team,date){
		var _date = date ?? new GlideDate();
		var rotation = this.getRotation(_date);
		return this.getTeamShiftByRotation(team,rotation);
	},
	getTeamShiftByRotation : function(team,rotation){
		var shift = new GlideRecord(this.constants.TABLE_SHIFTS);
		shift.addEncodedQuery(`rotation=${rotation}^team=${team}^state!=cancelled^type=engineer`);
		shift.query();
		if(shift.next()){
			return {
				id:shift.team_member.getValue('sys_id'),
				team:shift.getDisplayValue('team'),
				name:shift.getDisplayValue('team_member'),
				email:shift.getDisplayValue('team_member.user.email'),
				phone:shift.getDisplayValue('team_member.user.phone'),
				shift_id:shift.getUniqueValue(),
				region:shift.getDisplayValue('team_member.region')
			};
		}
	},
	getAllShiftsForRotation : function(rotation){
		var engs = [];
		var shifts = new GlideRecord(this.constants.TABLE_SHIFTS);
		shifts.addEncodedQuery(`rotation=${rotation}^state!=cancelled^type=engineer`);
		shifts.query();
		while(shifts.next()){
			let eng = {
				id:shifts.team_member.getValue('sys_id'),
				team:shifts.getDisplayValue('team'),
				team_id:shifts.getValue('team'),
				name:shifts.getDisplayValue('team_member'),
				user:shifts.team_member.user.getValue('sys_id'),
				email:shifts.getDisplayValue('team_member.user.email'),
				phone:shifts.getDisplayValue('team_member.user.phone'),
				shift_id:shifts.getUniqueValue(),
				region:shifts.getDisplayValue('team_member.region')
			};
			engs.push(eng);
		}
		return engs;
	},
	getAssigneesByRotation : function(rotation) {
		var ids = [];
		var shifts = new GlideRecord(this.constants.TABLE_SHIFTS);
		shifts.addEncodedQuery('rotation='+rotation+'^state!=cancelled');
		//gs.info('rotation='+rotation+'^state!=cancelled');
		shifts.query();
		while(shifts.next()){
			//ids.push(shifts.team_member.user);
			var user = shifts.getValue('team_member');
			ids.push(user);
		}
		//gs.info(ids);
		//gs.info('sys_idIN'+ids.join(','));
		return ids;
	},
	getAllTeams : function(){
		var teams = [];
		var tr = new GlideRecordSecure(this.constants.TABLE_TEAMS);
		tr.addQuery('active',true);
		tr.query();
		while(tr.next()){
			teams.push({team:tr.getDisplayValue(),team_id:tr.getUniqueValue()});
		}
		return teams;
	},
	getAllHolidaysForRotation : function(rotation,region){
		var _rotation = new GlideRecord(this.constants.TABLE_ROTATIONS);
		_rotation.get(rotation);
		let from = _rotation.getDisplayValue('from');
		let to = _rotation.getDisplayValue('to');
		
		var holidays = [];
		var hr = new GlideRecord(this.constants.TABLE_HOLIDAYS);
		hr.addEncodedQuery(`dateBETWEENjavascript:gs.dateGenerate('${from}','start')@javascript:gs.dateGenerate('${to}','end')`);
		if(region){
			hr.addQuery('region',region);
		}
		hr.orderBy('date');
		hr.query();
		while(hr.next()){
			let formatted_date = new GlideDate();
			formatted_date.setValue(hr.getDisplayValue('date'));
			formatted_date = formatted_date.getByFormat('MMM d');
			let holiday = {
				date:hr.getDisplayValue('date'),
				formatted_date:formatted_date,
				region:hr.getDisplayValue('region'),
				type:hr.getValue('type')
			};
			holidays.push(holiday);
		}
		return holidays;
	},
	getReadonlyTable : function(rotation) {
		var _rotation = new GlideRecord(this.constants.TABLE_ROTATIONS);
		_rotation.get(rotation);

		var managers = this.getManagersByRotation(rotation);
		var html = '<table class="rotation-table">';
		html += '<tr class="title-row"><th colspan="2">This Week: '+_rotation.rotation+'</th><th>Phone</th></tr>';

		html += '<tr class="manager-row"><th>US Manager</th>';
		if(managers.some(m => m.region == 'US')){
			html+='<td>'+managers.find(m=>m.region == 'US').name+'</td>';
		} else {
			html+='<td>No manager scheduled</td>';
		}
		if(managers.some(m => m.region == 'US')){
			html+='<td>'+managers.find(m=>m.region == 'US').phone+'</td></tr>';
		} else {
			html+='<td></td></tr>';
		}

		html += '<tr class="manager-row"><th>IDC Manager</th>';
		if(managers.some(m => m.region == 'IDC')){
			html+='<td>'+managers.find(m=>m.region == 'IDC').name+'</td>';
		} else {
			html+='<td>No manager scheduled</td>';
		}
		if(managers.some(m => m.region == 'IDC')){
			html+='<td>'+managers.find(m=>m.region == 'IDC').phone+'</td></tr>';
		} else {
			html+='<td></td></tr>';
		}

		var shifts = this.getAllShiftsForRotation(rotation);
		for(var i=0;i < shifts.length; i++){
			var shift = shifts[i];
			html+='<tr><th>'+shift.team+'</th><td>'+shift.name+'</td><td>'+shift.phone+'</td></tr>';
		}

		var holidays_us = this.getAllHolidaysForRotation(rotation,'US');
		var holidays_idc = this.getAllHolidaysForRotation(rotation,'IDC');
		
		var us_wellness = holidays_us?.filter(h => h.type == 'wellness_day').map(h => h.formatted_date).join(', ') || 'None';

		var us_holidays = holidays_us?.filter(h => h.type == 'holiday').map(h => h.formatted_date).join(', ') || 'None';

		var idc_wellness = holidays_idc?.filter(h => h.type == 'wellness_day').map(h => h.formatted_date).join(', ') || 'None';

		var idc_holidays = holidays_idc?.filter(h => h.type == 'holiday').map(h => h.formatted_date).join(', ') || 'None';


		html+= '<tr class="holiday-row"><th>US Wellness Day</th><td colspan="2">'+us_wellness+'</td></tr>';
		html += '<tr class="holiday-row"><th>US Holidays</th><td colspan="2">'+us_holidays+'</td></tr>';
		html += '<tr class="holiday-row"><th>IDC Wellness Day</th><td colspan="2">'+idc_wellness+'</td></tr>';
		html +=	'<tr class="holiday-row"><th>IDC Holidays</th><td colspan="2">'+idc_holidays+'</td></tr>';
		html += '</table>';
	return html;
	},
	type: 'OnCallUtils'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>aaron.brunet</sys_created_by>
        <sys_created_on>2024-07-16 00:43:26</sys_created_on>
        <sys_id>ab4706eb939f4210bef6fff56aba1020</sys_id>
        <sys_mod_count>91</sys_mod_count>
        <sys_name>OnCallUtils</sys_name>
        <sys_package display_value="On-Call Schedule" source="x_snc_on_call_sc_0">549b056793db4210bef6fff56aba1057</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="On-Call Schedule">549b056793db4210bef6fff56aba1057</sys_scope>
        <sys_update_name>sys_script_include_ab4706eb939f4210bef6fff56aba1020</sys_update_name>
        <sys_updated_by>aaron.brunet</sys_updated_by>
        <sys_updated_on>2024-07-22 18:52:36</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>ab4706eb939f4210bef6fff56aba1020</id>
        <sys_created_by>aaron.brunet</sys_created_by>
        <sys_created_on>2024-07-17 01:12:30</sys_created_on>
        <sys_id>15f71b7b93534210bef6fff56aba107b</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>aaron.brunet</sys_updated_by>
        <sys_updated_on>2024-07-17 01:12:30</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
